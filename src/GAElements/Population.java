package GAElements;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
/**
 * The class {@code Population} stores ArrayList of population.
 *
 */
public class Population {
    ArrayList <Individual> population = new ArrayList<>();

	int populationFitness = -1;
    
    private Population() {}

    /**
     * In the singleton class {@code SingletonHelper} private static _instance is initialised while SingletonHelper
     * class is loaded only once.This approach is threadsafe.
     *
     */
    private static class SingletonHelper{
        private static final Population _instance = new Population();
    }
    /**
     * The method {@code getInstance}
     * @return Population.SingletonHelper._instance;
     *
     */
    public static Population getInstance() {
        return Population.SingletonHelper._instance;
    }
    /**
     * The method {@code getPopulation}
     * @return population arraylist of individuals
     *
     */
    public ArrayList<Individual> getPopulation() {
		return population;
	}
    /**
     * The setter method {@code setPopulationFitness}
     * @param aFitness
     *
     */
    public void setPopulationFitness(int aFitness){
        populationFitness = aFitness;
    }
    /**
     * The getter method {@code getPopulationFitness}
     * @return populationFitness
     *
     */
	public int getPopulationFitness() {
		return populationFitness;
	}
    /**
     * The void method {@code generateRandomPopulation} population is generated by adding random individuals
     *
     */
    public void generateRandomPopulation(int aSize){
        for(int i=0; i<aSize; i++) {
            population.add(Individual.getRandomIndividual());
        }
    }
    /**
     * The void method {@code kill} kills the 2 weakest individuals and random individuals from the population
     *
     */
    public void kill(int aSize){

//        // RANDOM KIL
//        for(int j=0; j<aSize; j++) {
//            int index = (int) ((Math.random() * 100 % aSize));
//            population.remove(index);
//        }

        // Weakest 2 + Random 2
        for(int j=0; j<aSize; j++) {
            if (j<aSize/2){
                int index = (int) ((Math.random() * 100 % aSize));
                population.remove(index);
            }
            else{
               population.remove(population.size()-1);
            }
        }

    }
    /**
     * The void method {@code add} adds Individuals to the population array
     *
     */

    public void add(Individual[] theIndividuals){
        population.addAll(Arrays.asList(theIndividuals));
    }
    /**
     * The void method {@code printPopulation} prints population of each generation
     *
     */
    public void printPopulation(){
        for (Individual i:population) {
            System.out.println(i);
        }
    }

}
